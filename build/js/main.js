"use strict";

function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
(function (_sessionStorage$getIt, _Number) {
  var apiURL = 'https://fav-prom.com/api_lvlup_2025';
  var PROMO_START_DATE = new Date("2025-04-14T12:00:00");
  var currentDate = new Date();
  var weekDates = [];
  var weekNums = 0;
  var prizeFunds = ["300 000", "300 000", "400 000"];
  var formatDate = function formatDate(date) {
    return "".concat(date.getDate().toString().padStart(2, "0"), ".").concat((date.getMonth() + 1).toString().padStart(2, "0"));
  };
  for (var i = 0; i < 3; i++) {
    var start = new Date(PROMO_START_DATE.getTime() + i * 7 * 24 * 60 * 60 * 1000);
    var end = new Date(start.getTime() + 6 * 24 * 60 * 60 * 1000);
    end.setHours(23, 59, 59, 999);
    weekDates[i] = {
      start: start,
      end: end,
      period: "".concat(formatDate(start), " - ").concat(formatDate(end)),
      prizeFund: prizeFunds[i]
    };
    if (currentDate >= end) {
      weekNums++;
    }
  }
  for (var _i = 0; _i < weekDates.length; _i++) {
    if (currentDate >= weekDates[_i].start && currentDate <= weekDates[_i].end) {
      weekNums = _i + 1;
    }
  }
  if (weekNums === 0) {
    if (currentDate < weekDates[0].start) {
      console.log("Акція ще не почалась");
    } else {
      console.log("Акція вже закінчилась");
    }
  }
  console.log("Поточний тиждень:", weekNums);
  console.log("Деталі тижнів:", weekDates);
  var unauthMsgs = document.querySelectorAll('.unauth-msgs'),
    participateBtns = document.querySelectorAll('.took-part'),
    playBtns = document.querySelectorAll('.play-btn'),
    mainPage = document.querySelector(".fav-page"),
    tabsContainer = document.querySelector(".results__tabs"),
    weekAmount = document.querySelector(".results__prize-amount");
  var ukLeng = document.querySelector('#ukLeng');
  var enLeng = document.querySelector('#enLeng');
  var locale = (_sessionStorage$getIt = sessionStorage.getItem("locale")) !== null && _sessionStorage$getIt !== void 0 ? _sessionStorage$getIt : 'uk';
  // let locale =  'uk';

  if (ukLeng) locale = 'uk';
  if (enLeng) locale = 'en';
  var i18nData = {};
  var userId;
  var debug = false;
  userId = (_Number = Number(sessionStorage.getItem("userId"))) !== null && _Number !== void 0 ? _Number : 100300268;
  // userId = 100300268 ;

  var checkUserAuth = function checkUserAuth() {
    if (userId) {
      var _iterator = _createForOfIteratorHelper(unauthMsgs),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var unauthMes = _step.value;
          unauthMes.classList.add('hide');
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      request("/users").then(function (data) {
        var user = data.find(function (user) {
          return user.userid === userId;
        });
        if (user) {
          var _iterator2 = _createForOfIteratorHelper(playBtns),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var playBtn = _step2.value;
              playBtn.classList.remove('hide');
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
          var _iterator3 = _createForOfIteratorHelper(participateBtns),
            _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var participateBtn = _step3.value;
              participateBtn.classList.add('hide');
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        } else {
          var _iterator4 = _createForOfIteratorHelper(participateBtns),
            _step4;
          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var _participateBtn = _step4.value;
              _participateBtn.classList.remove('hide');
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
          var _iterator5 = _createForOfIteratorHelper(playBtns),
            _step5;
          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var _playBtn = _step5.value;
              _playBtn.classList.add('hide');
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }
        }
      });
    } else {
      var _iterator6 = _createForOfIteratorHelper(participateBtns),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var participateBtn = _step6.value;
          participateBtn.classList.add('hide');
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      var _iterator7 = _createForOfIteratorHelper(unauthMsgs),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var _unauthMes = _step7.value;
          _unauthMes.classList.remove('hide');
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    }
  };
  var InitPage = function InitPage() {
    checkUserAuth();
    translate();
    renderTabs(tabsContainer);
  };
  function participate() {
    if (!userId) {
      return;
    }
    var params = {
      userid: userId
    };
    console.log(params);
    fetch(apiURL + '/user/', {
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      method: 'POST',
      body: JSON.stringify(params)
    }).then(function (res) {
      return res.json();
    }).then(function (res) {
      var _iterator8 = _createForOfIteratorHelper(participateBtns),
        _step8;
      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var joinBtn = _step8.value;
          joinBtn.classList.add('hide');
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
      InitPage();
    });
  }
  function loadTranslations() {
    return fetch("".concat(apiURL, "/new-translates/").concat(locale)).then(function (res) {
      return res.json();
    }).then(function (json) {
      i18nData = json;
      translate();
      var mutationObserver = new MutationObserver(function (mutations) {
        translate();
      });
      mutationObserver.observe(document.getElementById('lvlUp'), {
        childList: true,
        subtree: true
      });
    });
  }
  function translate() {
    var elems = document.querySelectorAll('[data-translate]');
    if (elems && elems.length) {
      if (!debug) {
        elems.forEach(function (elem) {
          var key = elem.getAttribute('data-translate');
          elem.innerHTML = translateKey(key);
          elem.removeAttribute('data-translate');
        });
      } else {
        console.log("translation works!");
      }
    }
    if (locale === 'en') {
      mainPage.classList.add('en');
    }
  }
  function translateKey(key, defaultValue) {
    if (!key) {
      return;
    }
    defaultValue = defaultValue || key;
    return i18nData[key] || defaultValue;
  }
  function request(link) {
    return fetch(apiURL + link, {
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    }).then(function (res) {
      return res.json();
    });
  }
  function renderTabs(container) {
    container.innerHTML = "";
    var defaultTab = false;
    for (var _i2 = 0; _i2 < weekDates.length; _i2++) {
      var tab = document.createElement("div");
      tab.classList.add("results__tabs-item");
      tab.textContent = "".concat(weekDates[_i2].period);
      if (_i2 === weekNums - 1) {
        defaultTab = true;
        tab.classList.add("_active");
        weekAmount.textContent = "".concat(weekDates[_i2].prizeFund, " \u20B4");
      }
      tab.setAttribute("data-week", _i2 + 1);
      container.appendChild(tab);
    }
    var tabs = document.querySelectorAll('.results__tabs-item');
    console.log(defaultTab);
    if (!defaultTab) {
      tabs[0].classList.add("_active");
      weekAmount.textContent = "".concat(weekDates[0].prizeFund, " \u20B4");
    }
  }
  function init() {
    InitPage();
    if (window.store) {
      var state = window.store.getState();
      userId = state.auth.isAuthorized && state.auth.id || '';
    } else {
      var c = 0;
      var i = setInterval(function () {
        if (c < 50) {
          if (window.g_user_id) {
            userId = window.g_user_id;
            checkUserAuth();
            clearInterval(i);
          }
        } else {
          clearInterval(i);
        }
      }, 200);
    }
    var _iterator9 = _createForOfIteratorHelper(participateBtns),
      _step9;
    try {
      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
        var joinBtn = _step9.value;
        joinBtn.addEventListener('click', function () {
          participate();
        });
      }
    } catch (err) {
      _iterator9.e(err);
    } finally {
      _iterator9.f();
    }
    checkUserAuth();
  }
  document.addEventListener('click', function (e) {
    var tab = e.target.closest('.results__tabs-item');
    if (!tab) return;
    var allTabs = document.querySelectorAll('.results__tabs-item');
    allTabs.forEach(function (item) {
      item.classList.remove('_active');
    });
    tab.classList.add('_active');
    var tabWeek = tab.getAttribute('data-week');
    weekAmount.textContent = "".concat(weekDates[tabWeek - 1].prizeFund, " \u20B4");
    console.log(tabWeek);
  });
  loadTranslations().then(init);
  var welcomeLogo = document.querySelector(".welcome__logo"),
    welcomeText = document.querySelector(".welcome__text"),
    welcomePrize = document.querySelector(".welcome__prize");
  setTimeout(function () {
    welcomeLogo.classList.remove("topAnimHide");
    welcomeLogo.classList.add("topAnimShow");
  }, 250);
  setTimeout(function () {
    welcomeText.classList.remove("topAnimHide");
    welcomeText.classList.add("topAnimShow");
  }, 500);
  setTimeout(function () {
    welcomePrize.classList.remove("topAnimHide");
    welcomePrize.classList.add("topAnimShow");
  }, 750);

  //test

  if (!userId) {
    document.querySelector("#results-table-other").classList.add("hide");
  }
  document.querySelector(".auth-btn").addEventListener("click", function () {
    userId = Number(sessionStorage.getItem("userId")) || 0;
    if (userId === 100300268) {
      userId = 321123321;
    } else if (userId === 321123321) {
      userId = 0;
    } else {
      userId = 100300268;
    }
    sessionStorage.setItem("userId", userId);
    window.location.reload();
  });
  document.querySelector(".dark-btn").addEventListener("click", function () {
    document.body.classList.toggle("dark");
  });
  document.querySelector(".lng-btn").addEventListener("click", function () {
    locale = locale === 'uk' ? 'en' : 'uk';
    sessionStorage.setItem("locale", locale);
    window.location.reload();
  });
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
